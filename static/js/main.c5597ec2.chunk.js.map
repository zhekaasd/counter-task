{"version":3,"sources":["components/CounterDisplay.tsx","components/common/ButtonComponent.tsx","components/common/CounterValueSettings.tsx","components/SettingsCounter.tsx","redux/counter-reducer.ts","components/ControlButtonCounter.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["CounterDisplay","React","memo","counterState","useSelector","state","counterSettings","title","highlightCounter","value","max","displayed","editMode","className","min","ButtonComponent","props","onClick","disabled","CounterValueSettings","compare","type","onChange","SettingsCounter","setDisableStyle","disableSettingSet","set","e","asdf","Number","currentTarget","stateValueMax","stateValueMin","size","setChangedValue","initialState","inc","reset","ControlButtonCounter","resetDisableStyle","incDisableStyle","newValue","changeValue","resetValue","App","dispatch","useDispatch","useCallback","valueMin","setValueMinAC","valueMax","setValueMaxAC","valueVs","setChangedValueAC","style","display","flexDirection","alignItems","Boolean","window","location","hostname","match","reducers","combineReducers","action","stateCopy","counter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5597ec2.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css'\r\nimport './Settings.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {InitialType} from \"../redux/counter-reducer\";\r\n\r\n\r\nconst CounterDisplay = React.memo ( () => {\r\n\r\n//обращаемся к нашему стейту с помощью хука 'useSelector' и достаем нужные нам данные\r\n    let counterState = useSelector<AppRootStateType, InitialType>(state => state.counterSettings);\r\n\r\n//локальный стейт с текстом для дисплея счётчика\r\n    let title = ['Vvedite korrektnoe znachenie', \"Nazhmite 'set' chto bi primenit nastroiki\"];\r\n\r\n//стилизаяция дисплея при достижении максимального значения\r\n    let highlightCounter = counterState.value >= counterState.max ? 'active' : '';\r\n\r\n    let displayed = counterState.editMode ? <div className={`blockCounterScreen + ${highlightCounter}`}> {counterState.value} </div> // отображается значение счётчика\r\n        : (counterState.max === counterState.min || counterState.min < 0) ? <div className={`blockCounterScreen + active`}> {title[0]} </div> // отображается, если в инпуте введене некороектное значение\r\n            : <div className={`blockCounterScreen`}>{title[1]}</div> //отображается, если мы меняем значение в инпуте\r\n\r\n    return <div>{displayed}</div>\r\n});\r\n\r\n\r\nexport default CounterDisplay;","import React from \"react\";\r\n\r\n\r\ntype ButtonComponentPropsType = {\r\n    onClick: () => void\r\n    disabled: boolean\r\n    icon?: React.ReactNode\r\n    size?: string\r\n    title?: string\r\n    className: string\r\n}\r\n\r\nexport function ButtonComponent(props: ButtonComponentPropsType) {\r\n    return <button className={props.className} onClick={props.onClick} disabled={props.disabled}>{props.title}</button>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {InitialType} from \"../../redux/counter-reducer\";\r\n\r\ntype CounterValueSettingsPropsType = {\r\n    min?: number\r\n    max?: number\r\n    title: string\r\n    value?: number\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n\r\n}\r\n\r\nexport function CounterValueSettings(props: CounterValueSettingsPropsType) {\r\n\r\n//обращаемся к нашему стейту с помощью хука 'useSelector' и достаем нужные нам данные\r\n    let counterState = useSelector<AppRootStateType, InitialType>(state => state.counterSettings);\r\n\r\n//стилизация инпута, для некоректно введенных сначений счётчика\r\n    let compare = (counterState.max === counterState.min || counterState.min < 0) ? 'activeStyle' : 'defaultStyle';\r\n\r\n\r\n\r\n    return <div>\r\n        <div className={compare}>\r\n            <span>{props.title}</span>\r\n            <input type=\"number\"\r\n                   value={props.value}\r\n                   onChange={props.onChange}\r\n                   min={props.min}\r\n                   max={props.max}\r\n            />\r\n        </div>\r\n    </div>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport '../components/Settings.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {InitialType} from \"../redux/counter-reducer\";\r\nimport {ButtonComponent} from \"./common/ButtonComponent\";\r\nimport {CounterValueSettings} from \"./common/CounterValueSettings\";\r\n\r\n\r\n\r\ntype SettingsCounterPropsType = {\r\n    stateValueMin: (valueMin: number) => void\r\n    setChangedValue: (value: number) => void\r\n    stateValueMax: (valueMax: number) => void\r\n}\r\n\r\n\r\nconst SettingsCounter = React.memo( (props: SettingsCounterPropsType) => {\r\n\r\n//обращаемся к нашему стейту с помощью хука 'useSelector' и достаем нужные нам данные\r\n    let counterState = useSelector<AppRootStateType, InitialType>(state => state.counterSettings);\r\n\r\n\r\n//считывает минимальное значение из инпута,переводит его из строки в число и сетает в \"глобальный\" стейт\r\n    let changeValueMin = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let asdf = Number(e.currentTarget.value);\r\n        props.stateValueMin(asdf);\r\n    }\r\n\r\n\r\n//считывает максимальное значение из инпута,переводит его из строки в число и сетает в \"глобальный\" стейт\r\n    let changeValueMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let asdf = Number(e.currentTarget.value);\r\n        props.stateValueMax(asdf);\r\n    }\r\n\r\n//\"сетает\" минимальное значения в качестве значения счётчика\r\n    let changedOnClickHandler = () => {\r\n        props.setChangedValue(counterState.min);\r\n    }\r\n\r\n\r\n//стилизая \"деоктивации\" кнопки, которая сохраняет значение в стейт и активирует счётчик\r\n    const setDisableStyle = counterState.editMode || counterState.max === counterState.min || counterState.min < 0 ? 'buttonLowOpacity' : 'buttonNormal';\r\n//правила \"деоктивации\" кнопки \"set\"\r\n    const disableSettingSet = (counterState.min === counterState.max || counterState.min < 0 || counterState.max === 0) ? !counterState.set : counterState.set;\r\n\r\n    return (\r\n        <div className='settingCounter'>\r\n            <CounterValueSettings onChange={changeValueMax} min={counterState.min} value={counterState.max} title={'max value: '}/>\r\n            <CounterValueSettings onChange={changeValueMin} value={counterState.min} max={counterState.max} title={'min value: '} min={-1}/>\r\n            <div>\r\n                <ButtonComponent className={setDisableStyle} size={\"small\"} onClick={changedOnClickHandler} disabled={ disableSettingSet } title={'set'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n} );\r\n\r\n\r\nexport default SettingsCounter;","\r\nexport type InitialType = {\r\n    max: number,\r\n    min: number,\r\n    value: number,\r\n    inc: boolean,\r\n    reset: boolean,\r\n    set: boolean,\r\n    editMode: boolean\r\n}\r\n\r\n\r\nexport type ActionsType = ChangeValueActionType | ResetValueActionType |\r\n    SetValueMinActionType | SetValueMaxActionType | SetChangedValueActionType;\r\n\r\n\r\nexport type ChangeValueActionType = {\r\n    type: 'CHANGE-VALUE'\r\n}\r\n\r\nexport type ResetValueActionType = {\r\n    type: 'RESET-VALUE'\r\n}\r\n\r\nexport type SetValueMinActionType = {\r\n    type: 'SET-VALUE-MIN',\r\n    valueMin: number\r\n}\r\n\r\nexport type SetValueMaxActionType = {\r\n    type: 'SET-VALUE-MAX',\r\n    valueMax: number\r\n}\r\n\r\nexport type SetChangedValueActionType = {\r\n    type: 'SET-CHANGED-VALUE',\r\n    valueVs: number\r\n}\r\n\r\n\r\n\r\n\r\nconst initialState:InitialType = {\r\n    max: 1,\r\n    min: 0,\r\n    value: 0,\r\n    inc: true,\r\n    reset: true,\r\n    set: false,\r\n    editMode: false\r\n};\r\n\r\n\r\nexport const counterReducer = (state: InitialType = initialState, action: ActionsType): InitialType => {\r\n    switch (action.type) {\r\n        case \"CHANGE-VALUE\": {\r\n            let stateCopy = {...state};\r\n            let counter = stateCopy.value + 1;\r\n            /*            if (counter >= stateCopy.max) {\r\n                            counter = stateCopy.max;\r\n                            stateCopy.inc = true;\r\n                        }*/\r\n            counter >= stateCopy.max ? stateCopy.inc = true : stateCopy.inc = false;\r\n\r\n            return {...stateCopy, reset: false, set: true, value: counter};\r\n            /*            stateCopy.reset = false;\r\n                        stateCopy.set = true;\r\n                        stateCopy.value = counter;\r\n                        stateCopy.inc = false;*/\r\n        }\r\n\r\n        case 'RESET-VALUE': {\r\n            let stateCopy = {...state};\r\n            if ( stateCopy.value > 0 ) {\r\n                stateCopy.value = stateCopy.min\r\n            }\r\n            stateCopy = {...stateCopy, reset: true, inc: false}\r\n\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"SET-VALUE-MIN\": {\r\n            let stateCopy = {...state};\r\n\r\n            return {...stateCopy, min: action.valueMin, reset: true, inc: true, editMode: false, value: action.valueMin, set: false}\r\n        }\r\n\r\n        case \"SET-VALUE-MAX\": {\r\n            let stateCopy = {...state};\r\n\r\n            return {...stateCopy, max: action.valueMax, reset: true, inc: true, editMode: false, set: false}\r\n        }\r\n\r\n        case \"SET-CHANGED-VALUE\": {\r\n            let stateCopy = {...state};\r\n\r\n            return {...stateCopy, value: action.valueVs, inc: false, editMode: true, reset: true, set: true};\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const changeValueAC = (): ChangeValueActionType => {\r\n    return {type: 'CHANGE-VALUE', }\r\n}\r\n\r\nexport const resetValueAC = (): ResetValueActionType => {\r\n    return {type: 'RESET-VALUE'}\r\n}\r\n\r\nexport const setValueMinAC = (valueMin: number): SetValueMinActionType => {\r\n    return {type: 'SET-VALUE-MIN', valueMin}\r\n}\r\n\r\nexport const setValueMaxAC = (valueMax: number): SetValueMaxActionType => {\r\n    return {type: 'SET-VALUE-MAX', valueMax}\r\n}\r\n\r\nexport const setChangedValueAC = (valueVs: number): SetChangedValueActionType => {\r\n    return {type: 'SET-CHANGED-VALUE', valueVs}\r\n}","import React from 'react';\r\nimport './../App.css'\r\nimport './Settings.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {InitialType} from \"../redux/counter-reducer\";\r\nimport {ButtonComponent} from \"./common/ButtonComponent\";\r\n\r\n\r\ntype ControlButtonCounterPropsType = {\r\n    changeValue: (value: number) => void\r\n    resetValue: () => void\r\n}\r\n\r\n\r\n\r\nconst ControlButtonCounter = React.memo( (props: ControlButtonCounterPropsType) => {\r\n\r\n//обращаемся к нашему стейту с помощью хука 'useSelector' и достаем нужные нам данные\r\n    let counterState = useSelector<AppRootStateType, InitialType>( state => state.counterSettings);\r\n\r\n//колбек функция, которая изменяет значение счётчика и возвращает нам нужное значение\r\n    let changeCounterValue = () => {\r\n        let newValue = counterState.value;\r\n        props.changeValue(newValue);\r\n    }\r\n//обработчик, который сбрасывает значение счётчика\r\n    let resetCounterValue = () => {\r\n        props.resetValue();\r\n    }\r\n\r\n//стилизая \"дизейбла\" кнопок \"reset\" и \"inc\"\r\n    let resetDisableStyle = counterState.reset ? 'buttonLowOpacity' : 'buttonNormal';\r\n    let incDisableStyle = counterState.inc ? 'buttonLowOpacity' : 'buttonNormal';\r\n\r\n\r\n    return (\r\n        <div className='blockCLickButton'>\r\n            <ButtonComponent onClick={changeCounterValue} disabled={counterState.inc} title={'inc'}  className={incDisableStyle} />\r\n            <ButtonComponent onClick={resetCounterValue} disabled={counterState.reset} title={'reset'} className={resetDisableStyle} />\r\n        </div>\r\n    )\r\n} );\r\n\r\n\r\nexport default ControlButtonCounter;","import React, {useCallback} from 'react';\n\nimport './App.css';\nimport CounterDisplay from \"./components/CounterDisplay\";\nimport SettingsCounter from \"./components/SettingsCounter\";\nimport {useDispatch} from \"react-redux\";\nimport {\n  changeValueAC,\n  resetValueAC,\n  setChangedValueAC,\n  setValueMaxAC,\n  setValueMinAC\n} from \"./redux/counter-reducer\";\nimport ControlButtonCounter from './components/ControlButtonCounter';\n\n\n\nfunction App() {\n\n//  const counterSettings = useSelector<AppRootStateType, InitialStateType>(state => state.counterSettings);\n  const dispatch = useDispatch();\n\n\n//функция изменяющая значения счётчика и дизейблещая кнопку\n  const changeValue = useCallback ( () => {\n    dispatch(changeValueAC());\n  }, [dispatch] );\n\n//функция сбрасывающая значение до минимального и дизейблющая кнопку 'reset'\n  const resetValue = useCallback ( () => {\n    dispatch(resetValueAC());\n  }, [dispatch] );\n\n//функция считывующая минимальное значение из инпута и отправляющая это значение в локальный стейт\n  const stateValueMin = useCallback ( (valueMin: number) => {\n    dispatch(setValueMinAC(valueMin));\n  }, [dispatch] );\n\n//функция считывующая максимальное значение из инпута и отправляющая это значение в локальный стейт\n  const stateValueMax = useCallback ( (valueMax: number) => {\n    dispatch(setValueMaxAC(valueMax));\n  }, [dispatch] );\n\n//функция добавляющая считанные значения и активирующая счётчик\n  const setChangedValue = useCallback ( (valueVs: number) => {\n    dispatch(setChangedValueAC(valueVs));\n  }, [dispatch] );\n\n\n\n  return (\n      <div className='appWrapper'>\n        <div className='wrapperBlock'>\n          <div className={'container'}>\n            <div style={ {display: \"flex\", flexDirection: \"column\", alignItems: \"center\"} }>\n              <CounterDisplay />\n              <ControlButtonCounter changeValue={changeValue} resetValue={resetValue} />\n            </div>\n            <div>\n              <SettingsCounter setChangedValue={setChangedValue} stateValueMax={stateValueMax} stateValueMin={stateValueMin} />\n            </div>\n          </div>\n        </div>\n      </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    counterSettings: counterReducer\r\n});\r\n\r\nexport const store = createStore(reducers);\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}